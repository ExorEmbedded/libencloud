
==================
| Encloud API v1 |
==================


[ Important Notes ]

     - responses return json wrapped in a javascript function (JSONP handling
     to bypass same-origin policy), so the returned Content-Type is
     application/javascript, not application/json.


[ State Retrieval ]

* GET /api_v1/status

    Def 'state'         0      Idle            (grey)
                        1      Error           (red)
                        2      Setting Up      (yellow)
                        3      Connecting      (orange)
                        4      Connected       (green)

    e.g.    "jsonpCallback({
                'state' : 1,                    # string representation of state
                'error' : 'Some error',         # OPTIONAL: defined if state == 1 (StateError)
                'progress' {
                    'desc: 'Step description',  # string representation of step
                    'step': 2,                  # current step number 
                    'step': 5                   # total number of steps
                },
                'need' : 'license sb_auth'      # OPTIONAL list of space-separated "need" strings
            })"                                   to be fulfilled via API


[ Authentication/Login API ]

* POST /api_v1/auth                    [ Note: QIC only! ]

    Def 'type'          type of authentication: 'sb','sb_proxy','cloud','cloud_proxy'
    Def 'url'           OPTIONAL destination url for login authentication
    Def 'user'          user for authentication
    Def 'pass'          password for authentication

    e.g. 1              type=sb&url=myurl&user=myuser&pass=mypass
    e.g. 2              type=cloud_proxy&user=myuser&pass=mypass


[ Setup API ]             

* GET /api_v1/setup                    [ Note: ECE only! ]

    Def 'poi'           proof of identity returned by ECE for Switchboard association

    e.g.    "jsonpCallback({
                 'poi' : 'aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee'
             })"

* GET /api_v1/setup                    [ Note: QIC only! ]                              [[TODO]]

    e.g.    "jsonpCallback({
                 'server ' : {
                     'uuid' : 'aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee',
                     'external_ip' : '77.88.99.100',
                     'internal_ip' : '192.168.50.1'
                     'available_pages' : { 'settings' : '/manage/accecess/settings/standalone/',      # [...]
                 }
             })"

* POST /api_v1/setup                   [ Note: SECE only! ]

    Def 'license'       license entered by user to activate SECE

    e.g.                license=aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee


[ Cloud API ]

* POST /api_v1/cloud

    Def 'action'        operation to be performed: 'start','stop','syncRoutes'

    e.g. 1              action=start                                                    [[TODO]] [[?]]
    e.g. 2              action=syncRoutes&ips[]=192.168.1.100&ips[]=192.168.1.101       [[TODO]]


[ Error Handling ]

Upon error, the following two scenarios are possible:
   - if the error is at transport level, a standard HTTP status code is                     [[avoid?]]
     returned (generally with no content)
     HTTP Statuses returned in this version:
         - LIBENCLOUD_HTTP_STATUS_OK
         - LIBENCLOUD_HTTP_STATUS_BADMETHOD
         - LIBENCLOUD_HTTP_STATUS_BADREQUEST
         - LIBENCLOUD_HTTP_STATUS_NOTFOUND
   - if the failure is at application level, an 'error' field will be                       [[TODO]]
     returned in the json message with appropriate description.

     => "jsonpCallback({
             'error' : 'Some nasty error'
         })"
