#ifndef _LIBENCLOUD_CLIENT_H_
#define _LIBENCLOUD_CLIENT_H_

#include <QObject>
// Avoid weird error on OSX:
//  ./QUrl:1:1: error: source file is not valid UTF-8 <CF><FA><ED><FE><U+0007>
//#include <QUrl>
#include <QNetworkRequest>
#include <QNetworkReply>
#include <QNetworkProxy>
#include <QNetworkAccessManager>
#include <QAuthenticator>
#include <QSslConfiguration>
#include <encloud/Common>
#include <encloud/Error>

#ifdef Q_OS_WINCE
#define QSslConfiguration int
#endif

namespace libencloud {

class Client;

typedef enum {
	MSG_TYPE_NONE,
	MSG_TYPE_GET,
	MSG_TYPE_POST
} MsgType;

class LIBENCLOUD_DLLSPEC Connection : public QObject
{
    Q_OBJECT

    friend class Client;

public:
    Connection (Client *client, QNetworkReply *reply, int timeout, bool timeoutRetry);
    ~Connection ();

protected slots:
    void _timeout ();

protected:
    MsgType msgType;
    QNetworkRequest request;
    QByteArray data;

private:
    Client *_client;
    QNetworkReply *_reply;
    QTimer _timer;
    bool _timeoutRetry;
};

class LIBENCLOUD_DLLSPEC Client : public QObject
{
    Q_OBJECT

    friend class Connection;

public:
    Client ();
    ~Client ();

    QNetworkAccessManager *getNetworkAccessManager ();
    int setNetworkAccessManager (QNetworkAccessManager *qnam);

    void setVerifyCA (bool b = true);
    void setDebug (bool b = true);
    void setTimeout (int timeout, bool retry = false);

    void reset ();

	// GET if no params are provided, otherwise POST them (form)
    void run (const QUrl &url, const QUrl &params, const QMap<QByteArray, QByteArray> &headers,
            const QSslConfiguration &conf);

	// GET
    void get (const QUrl &url, const QMap<QByteArray, QByteArray> &headers,
			const QSslConfiguration &conf);

	// POST generic data
    void post (const QUrl &url, const QMap<QByteArray, QByteArray> &headers,
			const QByteArray &data, const QSslConfiguration &conf);

signals:
    void error (const libencloud::Error &err);
    void complete (const QString &body, const QMap<QByteArray, QByteArray> &headers);

protected slots:
    int _sendRequest(MsgType msgType, const QNetworkRequest &request, const QByteArray &data);
    void _send (MsgType msgType, const QUrl &url, const QMap<QByteArray, QByteArray> &headers,
			const QByteArray &data, const QSslConfiguration &conf);
    void _proxyAuthenticationRequired (const QNetworkProxy &proxy, QAuthenticator *authenticator);
    void _sslErrors (QNetworkReply *reply, const QList<QSslError> &errors);
    void _networkError (QNetworkReply::NetworkError err);
    void _finished (QNetworkReply *reply);

protected:
    void _connectQnam();

    static quint32 _id;
    QMap<QObject *, Connection *> _conns;
    QNetworkAccessManager *_qnam;
    bool _qnamExternal;
    QString _response;
    bool _verifyCA;
    bool _debug;
    int _timeout;
    bool _timeoutRetry;
    bool _sslError;
};

} // namespace libencloud

#endif  /* _LIBENCLOUD_CLIENT_H_ */
