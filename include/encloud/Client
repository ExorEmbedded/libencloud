#ifndef _LIBENCLOUD_CLIENT_H_
#define _LIBENCLOUD_CLIENT_H_

#include <QObject>
#include <QUrl>
#include <QNetworkRequest>
#include <QNetworkReply>
#include <QNetworkProxy>
#include <QNetworkAccessManager>
#include <QAuthenticator>
#include <QSslConfiguration>
#include <encloud/Common>
#include <encloud/Error>

#ifdef Q_OS_WINCE
#define QSslConfiguration int
#endif

namespace libencloud {

class LIBENCLOUD_DLLSPEC Client : public QObject
{
    Q_OBJECT

public:
    Client ();
    ~Client ();

	typedef enum {
		MSG_TYPE_NONE,
		MSG_TYPE_GET,
		MSG_TYPE_POST
	} MsgType;

    QNetworkAccessManager *getNetworkAccessManager ();
    int setNetworkAccessManager (QNetworkAccessManager *qnam);

    void setVerifyCA (bool b = true);
    void setDebug (bool b = true);

    void reset ();

	// GET if no params are provided, otherwise POST them (form)
    void run (const QUrl &url, const QUrl &params, const QMap<QByteArray, QByteArray> &headers,
            const QSslConfiguration &conf);

	// GET
    void get (const QUrl &url, const QMap<QByteArray, QByteArray> &headers,
			const QSslConfiguration &conf);

	// POST generic data
    void post (const QUrl &url, const QMap<QByteArray, QByteArray> &headers,
			const QByteArray &data, const QSslConfiguration &conf);

signals:
    void error (const libencloud::Error &err);
    void complete (const QString &reponse);

protected slots:
    void _send (MsgType msgType, const QUrl &url, const QMap<QByteArray, QByteArray> &headers,
			const QByteArray &data, const QSslConfiguration &conf);
    void _proxyAuthenticationRequired (const QNetworkProxy &proxy, QAuthenticator *authenticator);
    void _sslErrors (QNetworkReply *reply, const QList<QSslError> &errors);
    void _networkError (QNetworkReply::NetworkError err);
    void _finished (QNetworkReply *reply);
    void _timeout ();

protected:
    void _connectQnam();

    QNetworkReply *_reply;
    QNetworkAccessManager *_qnam;
    bool _qnamExternal;
    QString _response;
    bool _verifyCA;
    bool _debug;
    bool _sslError;
    QTimer _timer;
};

} // namespace libencloud

#endif  /* _LIBENCLOUD_CLIENT_H_ */
