#ifndef _LIBENCLOUD_NETWORKMANAGER_H_
#define _LIBENCLOUD_NETWORKMANAGER_H_

#include <QObject>
#include <QStringList>
#include <QTimer>
#include <QNetworkAccessManager>
#include <QNetworkRequest>
#include <QNetworkReply>
#include <encloud/Common>
#include <encloud/Manager/ProcessManager>

namespace libencloud 
{

/**
 * Handles routes sync
 */
class LIBENCLOUD_DLLSPEC NetworkManager : public QObject
{
    Q_OBJECT

public:
    typedef enum
    {
        NoError = 0,
        BadParamsError,
        RequestError,
        ReplyError,
        SysError
    }
    Error;

    typedef enum
    {
        NoneOperation = 0,

        // sync routes based on connected endpoints
        UpdateRoutesOperation,

        // remove all routes related to current gateway
        RemoveRoutesOperation
    }
    Operation;

    NetworkManager (ProcessManager *processManager = NULL);
    ~NetworkManager ();

    void stop ();
    static QString errorString (Error err);

signals:
    void sigError (NetworkManager::Error err, QString msg = "");

public:
    void setGateway (const QString &addr);
    void setFallbackGateway (const QString &addr);
    void setFallback (bool fallback);
    void syncRoutes (const QStringList &connectedEndpoints);

    // get/set
    inline ProcessManager *getProcessManager () { return _processManager; };

protected slots:
    void finishedReadRoutes (int exitCode, QProcess::ExitStatus exitStatus);

#ifdef Q_OS_WIN
    void finishedAddRoute (int exitCode, QProcess::ExitStatus exitStatus);
    void renewLease ();
#endif

protected:
    QString padIp4 (const QString &ip);
    void readRoutes (Operation op, bool sync = false);
    void readRoutesEx (QProcess *process);
    void addRoute (const QString &endpoint);
    void delRoute (const QString &endpoint);
    QPair<QString,QString> parseNetdef (const QString &netdef);

    ProcessManager *_processManager;
    bool _processManagerInternal;
    QProcess *_process;
    QString _gw;
    QString _gateway;
    QString _fallbackGateway;
    QStringList _connectedEndpoints;
    QStringList _previousEndpoints;
    Operation _routesOperation;

#ifdef Q_OS_WIN
    QTimer _routeWATimer;
#endif
};

}  // namespace libencloud

#endif  /* _LIBENCLOUD_NETWORKMANAGER_H_ */
