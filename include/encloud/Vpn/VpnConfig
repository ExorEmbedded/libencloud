#ifndef _LIBENCLOUD_PRIV_CLOUD_VPNCONFIG_H_
#define _LIBENCLOUD_PRIV_CLOUD_VPNCONFIG_H_

#include <encloud/Auth>
#include <encloud/Utils>

namespace libencloud {

class Config;

/**
 * \brief Manipulates client-side OpenVPN configuration files
 *
 * Currently supports basic config and a single possible fallback remote.
 */
class LIBENCLOUD_DLLSPEC VpnConfig
{
public:

    typedef enum {
        PortDefault = 1194
    } Default;

    typedef enum {
        NoneProto = -1,
        UdpProto,
        TcpProto,
        FirstProto = UdpProto,
        LastProto = TcpProto
    } Proto;

    typedef enum {
        NoneDev = -1,
        TapDev,
        TunDev,
        FirstDev = TapDev,
        LastDev = TunDev
    } Dev;

    VpnConfig ();
    VpnConfig (const QVariantMap &vm);
    VpnConfig (const QString &s);

    // use compiler-default
    //VpnConfig& operator= (const VpnConfig vc);
    bool operator== (const VpnConfig &vc) const;

    int clear ();
    bool checkValid (bool strict = true);
    bool isValid () const;
    bool isFile () const;
    int fromMap (const QVariantMap &vm);
    int fromString (const QString &s, bool parse = true);

    QString toString () const;
    int fromFile (const QString &path, bool parse = true);
    int toFile (const QString &path) const;

    // Auth Type *can* be set to avoid ambiguities when writing to file
    // (for example the UI may set p12Path then change to userpass, in which 
    // case p12Path should no longer be written)
    int setAuthType (Auth::Type authType);

    // Helper access functions - use these methods only if object was created
    // manually or via fromMap() - content is not parsed if creating via
    // fromFile() or fromString()
    bool isCompEnabled () const;
    int setCompEnabled (bool enabled);

    Dev getDev () const;
    int setDev (Dev dev);
    static bool validDev (Dev dev);
    static Dev devFromStr (const QString &s);
    static QString devToStr (Dev dev);

    static bool validProto (Proto proto);
    static Proto protoFromStr (const QString &s);
    static QString protoToStr (Proto proto);

    const QString &getRemote () const;
    int setRemote (const QString &remote);
    static bool validRemote (const QString &remote);

    int getRemotePort () const;
    int setRemotePort (int port);

    Proto getRemoteProto () const;
    int setRemoteProto (Proto proto);

    // NOTE: fallback here maps to multiple remotes in VPN config
    // this is different from Switchboard's higher level fallback config
    // which maps to two separate VPN configurations!
    bool isFallbackEnabled () const;
    int setFallbackEnabled (bool enabled);

    const QString &getFallbackRemote () const;
    int setFallbackRemote (const QString &remote);

    int getFallbackRemotePort () const;
    int setFallbackRemotePort (int port);

    Proto getFallbackRemoteProto () const;
    int setFallbackRemoteProto (Proto proto);

    const QString &getCaPath () const;
    int setCaPath (const QString &caPath);

    const QString &getCertPath () const;
    int setCertPath (const QString &certPath);

    const QString &getKeyPath () const;
    int setKeyPath (const QString &keyPath);

    const QString &getP12Path () const;
    int setP12Path (const QString &p12Path);

private:

    //
    // internals
    //
    bool _valid;
    bool _isFile;
    QString _string;

    Auth::Type _authType;

    //
    // configuration
    //
    bool _client;
    bool _nobind;
    bool _compEnabled;
    Dev _dev;

    QString _remote;
    int _remotePort;
    Proto _remoteProto;

    bool _fallbackEnabled;
    QString _fallbackRemote;
    int _fallbackRemotePort;
    Proto _fallbackRemoteProto;

    QString _caPath;
    QString _certPath;
    QString _keyPath;
    QString _p12Path;
};

} // namespace libencloud

#endif  /* _LIBENCLOUD_PRIV_CLOUD_VPNCONFIG_H_ */
