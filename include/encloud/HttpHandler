#ifndef _LIBENCLOUD_HTTP_HANDLER_H_
#define _LIBENCLOUD_HTTP_HANDLER_H_

#include <QObject>
#include <QString>
#include <QUuid>
#include <encloud/HttpAbstractHandler>

namespace libencloud {

// keep me aligned with _versionToApiHandler() factory method
typedef enum {
    API_VERSION_1 = 1,
    // future extensions here

    API_VERSION_CURRENT = API_VERSION_1  // set to current version
} 
ApiVersion;

class ApiHandler;

class HttpHandler : public QObject, public HttpAbstractHandler
{
    Q_OBJECT;

public:

    HttpHandler ();
    ~HttpHandler ();

    // top-level concrete handler
    int handle (const HttpRequest &request, HttpResponse &response);

    // attributes used by HTTP API handlers
    QString getCoreState () const;
    QString getNeed () const;

#ifdef LIBENCLOUD_MODE_ECE
    QUuid getPoi () const;
#endif

#ifdef LIBENCLOUD_MODE_SECE
    int setLicense (const QString &);
#endif

signals:
    void licenseSend (QUuid uuid);

private slots:
    void _coreStateChanged (const QString &state);
    void _needReceived (const QString &what);

private:
    HttpAbstractHandler *_versionToApiHandler (ApiVersion version);   

    ApiHandler *api;

    QString _coreState;
    QString _need;

#ifdef LIBENCLOUD_MODE_ECE
    QUuid _poi;
#endif
};

}  // namespace libencloud

#endif  // _LIBENCLOUD_HTTP_HANDLER_H_
