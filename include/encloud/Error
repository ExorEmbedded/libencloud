#ifndef _LIBENCLOUD_ERROR_H_
#define _LIBENCLOUD_ERROR_H_

#include <QDebug>
#include <QObject>
#include <QString>
#include <QTimer>
#include <encloud/Common>

namespace libencloud 
{

class LIBENCLOUD_DLLSPEC Error
{

public:

    typedef enum {
        CodeNull =                  -1,

        // 0xx
        CodeSuccess =               0,
        CodeGeneric =               1,
        CodeSystemError =           2,
        CodeUnconfigured =          3,
        CodeBadCredentials =        10,
        CodeRequestTimeout =        20,

        // 1xx
        CodeServiceUnreach =        100,

        // 2xx
        CodeServerUnreach =         200,
        CodeServerVerifyFailed =    201,
        CodeServerError =           202,
        CodeServerLicenseInvalid =  203,
        CodeServerNotFound       =  204,

        // 3xx
        CodeAuthFailed =            300,
        CodeAuthAlreadyConnected =  310,
        CodeAuthDomainRequired   =  320,

        // 4xx
        CodeProxyAuthFailed =       400,

        CodeSetupFailure =          450,

        // 5xx
        CodeClientFailure =         500,
        CodeClientTimeout =         501,
        CodeClientBadConfig =       502,

        // *NOTE* always update CodeLast to value above!!!

        CodeFirst =                 CodeSuccess,
        CodeLast =                  CodeClientBadConfig
    } Code;

    // Default constructor (unhandled error)
    Error ();

    // Use this for public errors which should be handled by client
    // Known error code + extra informative description
    Error (Code code, QString extra = "");

    // Plain error message with undefined error code
    Error (const QString &msg);

    bool isValid () const;
    bool operator == (const Error &e) const;
    bool operator != (const Error &e) const;
    QString toString () const;
    friend LIBENCLOUD_DLLSPEC QDebug operator << (QDebug d, const Error &error);

    Code getCode () const;
    int setCode (Code code);

    int getSeq () const;
    int setSeq (int seq);

    QString getDesc () const;
    int setDesc (const QString &desc);

    QString getExtra () const;
    int setExtra (const QString &desc);

private:

    QString _code2Desc (Code code);

    bool _isValid;
    Code _code;
    static int __seq;
    int _seq;
    QString _desc;
    QString _extra;
};

// setTimeout() sets plain constant retry (default)
// setBackoff() sets base for exponential backoff retries 
// All retries are single-shot.
class LIBENCLOUD_DLLSPEC Retry : public QObject
{
    Q_OBJECT

public:

    enum {
        Timeout = 5,      // fixed timeout
        BackoffBase = 2,  // exponential base for backoff
        BackoffMax = 300  // 5 minutes
    };

    Retry ();

    void setTimeout (int timeout = Timeout);
    void setBackoff (int base = BackoffBase, int max = BackoffMax);

signals:
    void timeout ();

public slots:

    void start ();
    void stop ();

private:
    int _timeout;
    int _base;
    int _backoff;
    int _max;
    QTimer _timer;
};

}  // namespace libencloud

#endif  // _LIBENCLOUD_ERROR_H_
