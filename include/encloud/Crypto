/** 
 * Helper crypto lib.
 */

#ifndef _LIBENCLOUD_CRYPTO_H_
#define _LIBENCLOUD_CRYPTO_H_

#include <QByteArray>
#include <QNetworkRequest>
#include <QSslCertificate>
#include <QSslConfiguration>
#include <QSslKey>
#include <QUrl>
#include <encloud/Auth>
#include <encloud/Common>
#include <openssl/bio.h>
#include <openssl/md5.h>

namespace libencloud {
namespace crypto {

//
// Generic helpers
//

LIBENCLOUD_DLLSPEC int requestFromAuth (const Auth &auth,
        QMap<QByteArray, QByteArray> &headers, QNetworkRequest &request);
LIBENCLOUD_DLLSPEC int configFromAuth (const Auth &auth, QUrl &url,
        QMap<QByteArray, QByteArray> &headers, QSslConfiguration
        &sslconf);
    
LIBENCLOUD_DLLSPEC QString userpassToBasic (const QString &user, const QString &pass);

LIBENCLOUD_DLLSPEC int certToString (const QString &path, QString &out);

//
// PKCS#12 helpers
//

LIBENCLOUD_DLLSPEC int p12SaveCa (const QString &p12Path,
        const QString &password, const QString &caPath);
LIBENCLOUD_DLLSPEC QSslCertificate p12GetCa (const QString &p12Path,
        const QString &password);

LIBENCLOUD_DLLSPEC int p12SaveCert (const QString &p12Path,
        const QString &password, const QString &certPath);
LIBENCLOUD_DLLSPEC QSslCertificate p12GetCert (const QString &p12Path,
        const QString &password);

LIBENCLOUD_DLLSPEC int p12SaveKey (const QString &p12Path,
        const QString &password, const QString &keyPath);
LIBENCLOUD_DLLSPEC QSslKey p12GetKey (const QString &p12Path,
        const QString &password);

}  // namespace crypto
}  // namespace libencloud

#ifdef __cplusplus
extern "C" {
#endif

/* Subject name setting callback - must return 0 on success */
typedef int (*libencloud_crypto_name_cb) (X509_NAME *n, void *arg);

struct libencloud_crypto_s
{
    libencloud_crypto_name_cb name_cb;
    void *name_cb_ctx;
    const EVP_CIPHER *cipher;
    bool zeropad;
};
typedef struct libencloud_crypto_s libencloud_crypto_t;

/* Initialization/Termination */
LIBENCLOUD_DLLSPEC int libencloud_crypto_init (libencloud_crypto_t *ec);
LIBENCLOUD_DLLSPEC int libencloud_crypto_term (libencloud_crypto_t *ec);

/* Settings */
LIBENCLOUD_DLLSPEC int libencloud_crypto_set_cipher (libencloud_crypto_t *ec, const EVP_CIPHER *cipher);
LIBENCLOUD_DLLSPEC int libencloud_crypto_set_zeropad (libencloud_crypto_t *ec, bool enabled);
LIBENCLOUD_DLLSPEC int libencloud_crypto_set_name_cb (libencloud_crypto_t *ec, int cb(X509_NAME *n, void *arg), void *ctx);

/* Crypto methods */
LIBENCLOUD_DLLSPEC int libencloud_crypto_genkey (libencloud_crypto_t *ec, size_t nbits, const char *outfile);
LIBENCLOUD_DLLSPEC int libencloud_crypto_gencsr (libencloud_crypto_t *ec, const char *keyfile, char **buf, long *buf_sz);
LIBENCLOUD_DLLSPEC char * libencloud_crypto_md5 (libencloud_crypto_t *ec, const char *buf, long buf_sz);
LIBENCLOUD_DLLSPEC int libencloud_crypto_enc (libencloud_crypto_t *ec, unsigned char *ptext, long ptext_sz,
    unsigned char *key, unsigned char *iv, unsigned char *ctext, long *ctext_sz);
LIBENCLOUD_DLLSPEC int libencloud_crypto_dec (libencloud_crypto_t *ec, unsigned char *ctext, long ctext_sz,
    unsigned char *key, unsigned char *iv, unsigned char *ptext, long *ptext_sz);

#ifdef __cplusplus
}
#endif

#endif  /* _LIBENCLOUD_PRIV_CRYPTO_H_ */
