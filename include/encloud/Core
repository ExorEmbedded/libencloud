#ifndef _LIBENCLOUD_CORE_H_
#define _LIBENCLOUD_CORE_H_

#include <QObject>
#include <QStateMachine>
#include <QString>
#include <QUuid>
#include <encloud/Api/CloudApi>
#include <encloud/Auth>
#include <encloud/Common>
#include <encloud/Manager/NetworkManager>
#include <encloud/Progress>
#include <encloud/Server>
#include <encloud/State>

namespace libencloud {

class AuthSession;
class Cloud;
class Config;
class SetupInterface;

class LIBENCLOUD_DLLSPEC Core : public QObject
{
    Q_OBJECT

public:

    Core ();
    ~Core ();

    bool isValid();

    int start ();
    int stop ();

    Config *getConfig () const;
    int attachServer (Server *server);

    // Note: the following signals and slots are for internal usage - clients
    // should use HTTP API for status monitoring and providing data

signals:
    void error (const QString &msg);
    void stateChanged (State state);
    void progress (const Progress &p);
    void need (const QString &what);
    void authSupplied (const Auth &auth);
    void serverConfigSupply (const QVariant &variant);
    void actionRequest (const QString &action, const Params &params);

private slots:
    void _stateEntered ();
    void _stateExited ();
    void _setupCompleted ();
    void _errorReceived (const QString &msg);
    void _progressReceived (const Progress &p);
    void _authRequired (Auth::Id id);
    void _clientPortReceived (int port);
    void _serverConfigReceived (const QVariant &variant);
    void _actionRequest (const QString &action, const Params &params);

private:
    int _initConfig ();
    int _initCrypto ();
    int _initSetup ();
    int _initCloud ();
    int _initApi ();
    int _initFsm ();
    int _startCloud ();
    QString _stateStr (QState *state);

    bool _isValid;

    Config *_cfg;
    SetupInterface *_setup;
    QObject *_setupObj;
    Cloud *_cloud;
    QObject *_cloudObj;

    QStateMachine _fsm;
    QState *_initialState;
    QState *_previousState;
    QState _setupSt, *_setupState;
    QState _cloudSt, *_cloudState;

    int _clientPort;
    CloudApi _cloudApi;

    NetworkManager _networkManager;
};

}  // namespace libencloud

#endif  // _LIBENCLOUD_CORE_H_
