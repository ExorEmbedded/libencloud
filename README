
[[ What is libencloud? ]]

libencloud is a Qt-based library which provides functionality to connect to
Cloud Services from PCs and devices.

It comprises the following modules:
 - setup: retrieval from Switchboard of setup information such as VPN connection configuration
 - request and renewal of Operation certificates
 - cloud: VPN client and manager components
 - HTTP-based API for monitoring and control via client applications (Switchboard, GUI, browser or other custom clients)

[[ Build ]]
                                                Tested version (s)
                                                ^^^^^^^^^^^^^^
Linux                                           Ubuntu 12.04
=====

Install dependencies:

$ sudo apt-get install qtcreator                2.4.1-0ubuntu2
$ sudo apt-get install libssl-dev               1.0.1-4ubuntu5.10

Install QJson as per instructions here:         0.8.1
http://qjson.sourceforge.net/build/       

Enter package directory, then:

$ qmake
$ make 
$ sudo make install

Run tests with:

$ make check  # Note: requires Switchboard or simulator.

Windows
=======

Install qt 4.8 (MinGW or VS2008 version) and qtcreator (or sdk) from here http://qt-project.org/downloads/
Install openssl 1.0.1h from here http://slproweb.com/download/Win32OpenSSL-1_0_1h.exe
	, choosing DLLs installed to OpenSSL bin dir (not system)

Open the project file with qtcreator and select the kit (MinGW or VS2008).

Add the environment variable OPENSSL_INCLUDEPATH to build environment (otherwise use default path c:\openssl).

Setup organisation and mode in CONFIG variable in "qmake" Build Step (see common.pri for definitions).

Optional: to deploy locally for testing/development, add "install" to arguments
in "Make" Build Step.

Run qmake and build.

[ Logging ]

The log level/verbosity is set in /etc/encloud/libencloud.json, following syslog() numbering. For example the following:

"log" : {
  "lev": 7
}

will increase to maximum verbosity (default is 3).

#define LOG_EMERG   0   /* system is unusable */
#define LOG_ALERT   1   /* action must be taken immediately */
#define LOG_CRIT    2   /* critical conditions */
#define LOG_ERR     3   /* error conditions */
#define LOG_WARNING 4   /* warning conditions */
#define LOG_NOTICE  5   /* normal but significant condition */
#define LOG_INFO    6   /* informational */
#define LOG_DEBUG   7   /* debug-level messages */
