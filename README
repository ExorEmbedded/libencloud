
[ What is libece? ]

libece is a simplified Switchboard communication library which provides
functionality to handle:
 - request and renewal of Operation certificates
 - retrieval of license info and VPN connection configuration

, whilst hiding internal Qt-based C++ implementation including a
JSON-over-HTTPS communication channel, PKI management and licensing details.

[ Build ]
                                                Tested version (s)
                                                ^^^^^^^^^^^^^^
Linux                                           Ubuntu 12.04

Install dependencies:

$ sudo apt-get install qtcreator                2.4.1-0ubuntu2
$ sudo apt-get install libssl-dev               1.0.1-4ubuntu5.10

Install QJson as per instructions here:         0.8.1
http://qjson.sourceforge.net/build/       

Enter package directory, then:

$ qmake
$ make 
$ make install 

*Important Notes*: 
    - configuration files *must not* be readable by other users
        e.g. Linux: sudo chmod 600 /etc/ece/*
    - configuration drectory and files *must* be writable by the user/process calling libece!
        e.g. Linux: sudo chown -R my_user /etc/ece
    - different paths for files and keys can be configured via "prefix" in /etc/ece/ece.json

Run tests with:

$ make check  # Note: requires Switchboard or simulator.

Windows

Install qt 4.8 (MinGW or VS2008 version) and qtcreator (or sdk) from here http://qt-project.org/downloads/
Install openssl 1.0.1e from here http://slproweb.com/download/Win32OpenSSL-1_0_1e.exe

Open the project file with qtcreator and select the kit (MinGW or VS2008).

Add the environment variable OPENSSL_INCLUDEPATH to build environment (otherwise use default path c:\openssl).

Run qmake and build.

[ Logging ]

Follow syslog() numbering, for example modifying common.pri as follows:

QMAKE_CXXFLAGS += -DECE_LOGLEVEL=7

which will increase to maximum verbosity (default is 3).

#define LOG_EMERG   0   /* system is unusable */
#define LOG_ALERT   1   /* action must be taken immediately */
#define LOG_CRIT    2   /* critical conditions */
#define LOG_ERR     3   /* error conditions */
#define LOG_WARNING 4   /* warning conditions */
#define LOG_NOTICE  5   /* normal but significant condition */
#define LOG_INFO    6   /* informational */
#define LOG_DEBUG   7   /* debug-level messages */
